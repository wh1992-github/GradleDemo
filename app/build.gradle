import com.android.builder.core.DefaultManifestParser

import java.text.SimpleDateFormat

apply plugin: 'com.android.application'

//从androidManifest.xml中获取版本号
def getVersionNameFromManifest() {
    def manifestParser = new DefaultManifestParser()
    return manifestParser.getVersionName(android.sourceSets.main.manifest.srcFile)
}

//获取时间戳
def getTime() {
    return new SimpleDateFormat("yyyyMMdd").format(new Date())
//   return new Date().format("yyyyMMddHHmmss")
}

android {
    //noinspection GradleCompatible
    compileSdkVersion 30
    buildToolsVersion '30.0.3'
    defaultConfig {
        applicationId "com.example.wh.myapplication"
        minSdkVersion 23
        targetSdkVersion 30
        versionCode 1
        versionName "1.0"
        flavorDimensions "versionName"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }
    sourceSets {
        main {
            java.srcDirs = ["src/main/java"]
            jniLibs.srcDirs = ['src/main/libs']
        }
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
        debug {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    //修改生成的apk名字
//    applicationVariants.all { variant ->
//        variant.outputs.all { output ->
//            //versionName,buildType.name,versionCode,编译时间
//            def fileName = "${variant.versionName}_" + "${variant.buildType.name}_" + getTime() + "_V" + "${variant.versionCode}" + ".apk"
//            def outFile = output.outputFile
//            if (outFile != null && outFile.name.endsWith('.apk')) {
//                outputFileName = fileName
//            }
//        }
//    }

    productFlavors {
        //多渠道打包
        common {
            applicationId "com.example.wh.myapplication.common"
            manifestPlaceholders = [package_name     : "com.example.wh.myapplication.common",
                                    APP_NAME         : "@string/app_name",
                                    APP_CHANNEL_VALUE: "commonChannel"]
            versionName "common"
            versionCode Integer.valueOf(getTime())
            //library多渠道编译:重新定义此属性，动态的获取lib module的当前flavor
            missingDimensionStrategy "versionLib", "commonLib"
        }
        normal {
            applicationId "com.example.wh.myapplication.normal"
            manifestPlaceholders = [package_name     : "com.example.wh.myapplication.normal",
                                    APP_NAME         : "@string/app_name",
                                    APP_CHANNEL_VALUE: "normalChannel"]
            versionName "normal"
            versionCode Integer.valueOf(getTime())
            //library多渠道编译:重新定义此属性，动态的获取lib module的当前flavor
            missingDimensionStrategy "versionLib", "normalLib"
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
}

static def releaseTime() {
    return new Date().format("yyyyMMdd-HH:mm:ss", TimeZone.getTimeZone("UTC"))
}

//在build结束后将build的文件copy到target中
gradle.buildFinished {
    copy {
        //删除存在的
        delete 'targetApk/'

        from('build/outputs/apk/common/debug/app-common-debug.apk')
        into('targetApk/')
        rename('app-common-debug.apk', 'Common.apk')

        from('build/outputs/apk/normal/debug/app-normal-debug.apk')
        into('targetApk/')
        rename('app-normal-debug.apk', 'Normal.apk')
    }
}

//delete
task deleteDir(type: Delete) {
    delete "build/"
}

//copy 任务
task copyApk(type: Copy) {
    //删除存在的
    delete 'targetApk/'

    from("build/outputs/apk/common/debug/app-common-debug.apk")
    into("targetApk/")
    rename('app-common-debug.apk', "common_${releaseTime()}.apk")

    from("build/outputs/apk/normal/debug/app-normal-debug.apk")
    into("targetApk/")
    rename('app-normal-debug.apk', "normal_${releaseTime()}.apk")
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    //noinspection GradleCompatible
    implementation 'com.android.support:appcompat-v7:28.0.0'
    implementation 'com.android.support.constraint:constraint-layout:2.0.4'
    implementation files('src/main/libs/Jar_1.0_20210831090439.jar')
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'
    implementation project(':mylibrary')
}

//Task的第一种声明方法
task mTask1 {
    doLast {
        println "Hello，这是我声明的Task1"
    }
}
//Task的第二种声明方法
task(mTask2) {
    doLast {
        println "Hello，这是我声明的Task2"
    }
}
//Task的第三种声明方法
task('mTask3') {
    doLast {
        println "Hello，这是我声明的Task3"
    }
}