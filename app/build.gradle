import com.android.builder.core.DefaultManifestParser

import java.text.SimpleDateFormat

apply plugin: 'com.android.application'

//从androidManifest.xml中获取版本号
def getVersionNameFromManifest() {
    def manifestParser = new DefaultManifestParser()
    return manifestParser.getVersionName(android.sourceSets.main.manifest.srcFile)
}

//获取时间戳
def getTime() {
    return new SimpleDateFormat("yyyyMMdd").format(new Date())
//   return new Date().format("yyyyMMddHHmmss")
}

android {
    //noinspection GradleCompatible
    compileSdkVersion 30
    defaultConfig {
        applicationId "com.example.wh.myapplication"
        minSdkVersion 23
        targetSdkVersion 30
        versionCode 1
        versionName "1.0"
        flavorDimensions "versionName"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }
    sourceSets {
        main {
            java.srcDirs = ["src/main/java"]
            jniLibs.srcDirs = ['src/main/libs']
        }
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
        debug {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    //修改生成的apk名字
    applicationVariants.all { variant ->
        variant.outputs.all { output ->
            //versionName,buildType.name,versionCode,编译时间
            def fileName = "${variant.versionName}_" + "${variant.buildType.name}_" + getTime() + "_V" + "${variant.versionCode}" + ".apk"
            def outFile = output.outputFile
            if (outFile != null && outFile.name.endsWith('.apk')) {
                outputFileName = fileName
            }
        }
    }

    productFlavors {
        common {
            applicationId "com.example.wh.myapplication.common"
            manifestPlaceholders = [package_name: "com.example.wh.myapplication.common",
                                    APP_NAME    : "@string/app_name"]
            versionName "common"
            versionCode Integer.valueOf(getTime())
        }
        normal {
            applicationId "com.example.wh.myapplication.normal"
            manifestPlaceholders = [package_name: "com.example.wh.myapplication.normal",
                                    APP_NAME    : "@string/app_name"]
            versionName "normal"
            versionCode Integer.valueOf(getTime())
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    buildToolsVersion '30.0.3'
}

//copy 任务
task copyApk(type: Copy) {
    //删除存在的
    delete 'targetApk/'
    from("build/outputs/apk/common/debug/app-common-debug.apk")
    into("targetApk/")
    //重命名
    rename('app-common-debug.apk', "common.apk")

    from("build/outputs/apk/normal/debug/app-normal-debug.apk")
    into("targetApk/")
    //重命名
    rename('app-normal-debug.apk', "normal.apk")
}

task deleteApk(type: Delete) {
    delete "build"
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    //noinspection GradleCompatible
    implementation 'com.android.support:appcompat-v7:28.0.0'
    implementation 'com.android.support.constraint:constraint-layout:2.0.1'
    implementation files('src/main/libs/Jar_1.0_20210831090439.jar')
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'
    implementation project(':mylibrary')
}
